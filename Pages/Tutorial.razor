@page "/tutorial"
@using System.ComponentModel.DataAnnotations

<PageTitle>Blazor Tutorial</PageTitle>

<div class="container-narrow">
  <h1>Blazor Tutorial</h1>
  <p class="text-muted">Target time: ~45â€“60 minutes. Youâ€™ll create a WASM app, add a form, and deploy to GitHub Pages.
  </p>

  <div class="card">
    <h3>Prerequisites</h3>
    <ul class="mb-0">
      <li>.NET 8 SDK</li>
      <li>GitHub account</li>
      <li>Coding Environment</li>
    </ul>
  </div>

  <div class="card">
    <h3>1) Create & run the app</h3>
    <p>Open the terminal of your preferred coding environment, such as <vscode>Visual Studio Code</vscode>. And enter:
    </p>
    <div class="code-block">
      <pre><code>dotnet new blazorwasm -n BlazorDemo -f net8.0
cd BlazorDemo
dotnet run</code></pre>
    </div>
    <br />
    <p>Browse <kbd>https://localhost:5001</kbd> and verify the template loads.</p>
  </div>

  <div class="card">
    <h3>2) Add Dependencies</h3>
    <p>
      Before we can add validation to our form, we need to make sure the
      <code>DataAnnotations</code> namespace is available across our Blazor project.
      This namespace provides attributes such as <code>[Required]</code> and
      <code>[StringLength]</code>, which weâ€™ll use to validate user input.
    </p>
    <p>
      Open the <code>_Imports.razor</code> file located in your project root, and add
      the following line:
    </p>
    <div class="code-block">
      <pre><code>&#64;using System.ComponentModel.DataAnnotations</code></pre>
    </div>
    <br />
    <p>
      Save the file, rebuild, and verify that your app still runs at
      <kbd>https://localhost:5001</kbd>.
      This ensures your project is ready to handle validation in the next step.
    </p>
  </div>

  <div class="card">
    <h3>3a) Add the form markup</h3>
    <p>Open <code>Pages/Counter.razor</code> and add the page header and form: </p>
    <div class="code-block">
      <pre><code>&#64;page "/counter"

&lt;h1&gt;Counter&lt;/h1&gt;

&lt;p role="status"&gt;Current count: &#64;currentCount&lt;/p&gt;
&lt;button class="btn btn-primary" &#64;onclick="IncrementCount"&gt;Click me&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;

&lt;EditForm Model="&#64;model" OnValidSubmit="Submit"&gt;
  &lt;DataAnnotationsValidator /&gt;

  &lt;div class="mb-3"&gt;
    &lt;label class="form-label"&gt;Name&lt;/label&gt;
    &lt;InputText class="form-control" &#64;bind-Value="model.Name" /&gt;
    &lt;ValidationMessage For="() =&gt; model.Name" /&gt;
  &lt;/div&gt;

  &lt;button class="btn btn-primary" type="submit"&gt;Submit&lt;/button&gt;
&lt;/EditForm&gt;
</code></pre>
    </div>
    <br />
    <p>Don't worry if there are errors right now, once you complete the next steps it will work!</p>
  </div>

  <div class="card">
    <h3>3b) Show a confirmation message</h3>
    <p>Display a greeting after a successful submit:</p>
    <div class="code-block">
      <pre><code>&#64;if (!string.IsNullOrWhiteSpace(submittedName))
{
  &lt;br /&gt;&lt;div class="alert alert-success"&gt;Hello, &#64;submittedName!&lt;/div&gt;
}
</code></pre>
    </div>
  </div>

  <div class="card">
    <h3>3c) Add the backing code</h3>
    <p>Add state, validation model, and handlers:</p>
    <div class="code-block">
      <pre><code>&#64;code {
  private int currentCount = 0;
  private MyModel model = new();
  private string? submittedName;

  private void IncrementCount() =&gt; currentCount++;
  private void Submit() =&gt; submittedName = model.Name;

  public class MyModel
  {
    [Required]
    [StringLength(50)]
    public string Name { get; set; } = "";
  }
}
</code></pre>
    </div>
    <br />
    <p>Save your work, rebuild the app, and test the form in the browser to confirm that the submitted name is displayed
      back to you. With validation and basic event handling now in place, you're ready to move on to the deployment
      stage.</p>
  </div>

  <div class="card">
    <h3>4a) Initialise Git and prepare the project for publishing</h3>
    <p>
      To deploy the app using GitHub Pages, the project must be stored in a Git repository.
      We will now initialise Git locally, add a <code>.gitignore</code>, and make the first commit.
    </p>

    <p>From the project root (<code>BlazorDemo/</code>), run:</p>
    <div class="code-block">
      <pre><code>git init
git add .
git commit -m "Initial commit"</code></pre>
    </div>

    <p>
      Before pushing to GitHub, create a <code>.gitignore</code> file to exclude build artefacts such as
      <code>/bin</code>, <code>/obj</code>, and user-specific files. A typical .NET <code>.gitignore</code> looks like
      this:
    </p>

    <div class="code-block">
      <pre><code>bin/
obj/
*.user
*.swp
*.DS_Store</code></pre>
    </div>

    <p>
      Optionally, you can also add a <code>LICENSE</code> file (e.g., MIT or Unlicense) if you intend to make the
      project open source.
    </p>

    <p>
      Instead of manually creating a GitHub repository through the website, you can create and link the remote
      repository directly from the terminal using the GitHub CLI (<code>gh</code>). Run:
    </p>

    <div class="code-block">
      <pre><code>gh repo create blazor-demo --public --source=. --remote=origin --push --confirm</code></pre>
    </div>

    <br /><p>
      This command will automatically create the repository on GitHub, add the remote, and push the initial
      commit â€” all in one step. Once this is done, you're ready to continue by adding the deployment workflow.
    </p>
  </div>


  <div class="card">
    <h3>4b) Create the GitHub Actions workflow</h3>
    <p>
      To enable automatic deployment, we first need to create a GitHub Actions workflow.
      This file tells GitHub how to build and publish your Blazor app when changes are pushed.
    </p>

    <p>
      In the <strong>project root</strong>, create a new folder named:
      <code>.github</code>
      Inside it, create another folder named:
      <code>workflows</code>
      Then create a new file inside that folder called:
      <code>deploy.yml</code>
    </p>

    <p>It should look like this:</p>
    <div class="code-block">
      <pre><code>BlazorDemo/
 â”œâ”€â”€ .github/
 â”‚    â””â”€â”€ workflows/
 â”‚         â””â”€â”€ deploy.yml
 â”œâ”€â”€ Pages/
 â”œâ”€â”€ wwwroot/
 â””â”€â”€ BlazorDemo.csproj
</code></pre>
    </div>

    <br />
    <p>
      Once the folder structure is in place, open <code>deploy.yml</code> and paste in the workflow file provided in the
      next step.
    </p>
  </div>

  <div class="card">
    <h3>4c) Add the workflow file</h3>
    <p>
      Open <code>.github/workflows/deploy.yml</code> and paste the following workflow. It builds your Blazor WASM app,
      fixes the <code>&lt;base href&gt;</code> for GitHub Pages, uploads the build as an artifact, and deploys it to
      Pages.
    </p>

    <div class="code-block">
      <pre><code>name: Deploy Blazor WASM to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Publish
        run: |
          dotnet restore
          dotnet publish -c Release -o publish
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          sed -i "s|&lt;base href=\&quot;/\&quot; /&gt;|&lt;base href=\&quot;/${REPO_NAME}/\&quot; /&gt;|" publish/wwwroot/index.html

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./publish/wwwroot

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
</code></pre>
    </div>

    <br />
    <p>
      Commit the new file and push to <code>main</code>. In your repo settings, set <strong>Pages â†’ Source</strong> to
      <em>GitHub Actions</em>. After the workflow runs, your site will be live at the URL shown in the run summary.
    </p>

    <p class="text-muted">
      Tip: If you deploy to a custom domain or a user/organization site (no repo subpath), remove the
      <code>sed</code> line that rewrites <code>&lt;base href&gt;</code>.
    </p>
  </div>

  <div class="card">
    <h3>5) Summary & Next Steps</h3>
    <p>
      Congratulations â€” your Blazor WebAssembly app is now live on GitHub Pages! ðŸŽ‰
      Youâ€™ve successfully:
    </p>

    <ul>
      <li>Created a Blazor WASM project using <code>dotnet new</code></li>
      <li>Added validation with <code>DataAnnotations</code></li>
      <li>Built a working form that submits and renders user input</li>
      <li>Initialised a Git repository and published it to GitHub</li>
      <li>Configured a CI/CD pipeline using GitHub Actions</li>
      <li>Deployed the final build to GitHub Pages</li>
    </ul>

    <p>
      Your project is now hosted at your GitHub Pages URL.
    </p>

    <div class="code-block">
      <pre><code>https://&lt;your-username&gt;.github.io/blazor-demo/</code></pre>
    </div>

    <br />
    <p>
      You can share this URL with others, or include it in documentation, your portfolio, or coursework submission.
      Any future changes you push to <code>main</code> will automatically trigger a new deployment.
    </p>

  </div>
</div>